package com.cairn.molecule;

class FragAtom {
    AtomType.Type atomType;
    int neighbours[];

    FragAtom() {;}
    FragAtom(AtomType.Type t, int n[]) {
        atomType = t;
        neighbours = n;
    }        
}

public class Fragments {
    Molecule molecule;
    Molecule currentFragmol;
    int currentFragmentNo;
    static final boolean DEBUG = false;
    
    // Some fragments that may be defined in the torsional distributions
    static final FragAtom[] BENZENE = new FragAtom[] {
        new FragAtom (AtomType.Type.CAR, new int[] {6, 2}),
        new FragAtom (AtomType.Type.CAR, new int[] {1, 3}),
        new FragAtom (AtomType.Type.CAR, new int[] {2, 4}),
        new FragAtom (AtomType.Type.CAR, new int[] {3, 5}),
        new FragAtom (AtomType.Type.CAR, new int[] {4, 6}),
        new FragAtom (AtomType.Type.CAR, new int[] {5, 1})};

    static final FragAtom[] RIBOSE = new FragAtom[] {
        new FragAtom(AtomType.Type.O3, new int[]{5, 2}),
        new FragAtom(AtomType.Type.C3, new int[]{1, 3}),
        new FragAtom(AtomType.Type.C3, new int[]{2, 4}),
        new FragAtom(AtomType.Type.C3, new int[]{3, 5}),
        new FragAtom(AtomType.Type.C3, new int[]{4, 1})};

    static final FragAtom[] ADENINE = new FragAtom[] {
        new FragAtom(AtomType.Type.NAR, new int[]{2, 6}),
        new FragAtom(AtomType.Type.CAR, new int[]{1, 3}),
        new FragAtom(AtomType.Type.CAR, new int[]{2, 4, 7}),
        new FragAtom(AtomType.Type.CAR, new int[]{3, 5, 9}),
        new FragAtom(AtomType.Type.NAR, new int[]{6, 4}),
        new FragAtom(AtomType.Type.CAR, new int[]{1, 5}),
        new FragAtom(AtomType.Type.N2, new int[]{3, 8}),
        new FragAtom(AtomType.Type.C2, new int[]{7, 9}),
        new FragAtom(AtomType.Type.NPL3, new int[]{4, 8})};
     
    static final FragAtom[] URACIL = new FragAtom[] {
        new FragAtom(AtomType.Type.NAM, new int[]{6, 2}),
        new FragAtom(AtomType.Type.C2, new int[]{1, 3}),
        new FragAtom(AtomType.Type.C2, new int[]{2, 4}),
        new FragAtom(AtomType.Type.C2, new int[]{5, 3}),
        new FragAtom(AtomType.Type.NAM, new int[]{4, 6}),
        new FragAtom(AtomType.Type.C2, new int[]{5, 1, 7}),
        new FragAtom(AtomType.Type.O2, new int[]{6})};

    static final FragAtom[] CYTOSINE = new FragAtom[] {
        new FragAtom(AtomType.Type.NAM, new int[]{6, 2}),
        new FragAtom(AtomType.Type.C2, new int[]{1, 3}),
        new FragAtom(AtomType.Type.C2, new int[]{2, 4}),
        new FragAtom(AtomType.Type.C2, new int[]{5, 3}),
        new FragAtom(AtomType.Type.N2, new int[]{4, 6}),
        new FragAtom(AtomType.Type.C2, new int[]{5, 1, 7}),
        new FragAtom(AtomType.Type.O2, new int[]{6})};

    static final FragAtom[][] FRAGS = 
        new FragAtom[][] {BENZENE, RIBOSE, ADENINE, URACIL, CYTOSINE};
    static final String FRAG_NAMES[] =
        new String[] {"benzene", "ribose", "adenine", "uracil", "cytosine"};
    static final int FRAG_TYPES[] = 
        new int[] {Atom.ATM_BENZENE, Atom.ATM_RIBOSE, 
                   Atom.ATM_ADENINE, Atom.ATM_URACIL, Atom.ATM_CYTOSINE};


    public Fragments() {;}

    public Fragments(Molecule mol) throws MoleculeException {
        molecule = mol;
        markAtomFragments();
    }

    public static void markAtomFragments(Molecule mol) throws MoleculeException {
        new Fragments(mol);
    }

    public static String idToFragName (int frag) {
        if (frag == Atom.ATM_NONE) return "none";
        for (int i=0; i<FRAG_TYPES.length; i++)
            if (frag == FRAG_TYPES[i])
                return FRAG_NAMES[i];
        return null;
    }

    public static int fragNameToId (String name) {
        for (int i=0; i<FRAG_NAMES.length; i++) 
            if (name.toLowerCase().equals(FRAG_NAMES[i]))
                return FRAG_TYPES[i];
        System.err.println("fragNameToID: unknown Fragment"+name);
        return Atom.ATM_NONE;
    }

    //   markAtomFragments
  
    //   Identify any fragments found in molecule.
    void markAtomFragments () throws MoleculeException {

        for (int i=0; i<molecule.nAtoms; i++)
            molecule.atoms[i].nFragments = 0;

        // look for all of the fragments
        for (int i=0; i<FRAGS.length; i++) {
            currentFragmentNo = i;
            markFragment();
        }
        molecule.out.println("\nFragments found in "+ molecule.name);
        molecule.printFragments ();
        molecule.out.println();
    }

    
    //   markFragment
    
    //   Look for a specific fragment in molecule
    void markFragment () throws MoleculeException {
        if (DEBUG) 
            System.out.println("Processing "+FRAG_NAMES[currentFragmentNo]);
        // covert the fragment data structure to a molecule data
        // structure.
        currentFragmol = fragmentToMolecule (FRAGS[currentFragmentNo]);
        // Use the Ullman algorithm to find any ocurrances of the
        // fragment
        if (currentFragmol.nAtoms <= molecule.nAtoms) {
            Ullman ullman = new Ullman(currentFragmol, molecule, Ullman.FRAG);
            try {
                if (DEBUG) 
                    System.out.println("Matching Fragment "+
                                       FRAG_NAMES[currentFragmentNo]);
                ullman.doUllman(new Ullman.UllmanCallback() {
                        public void callback(boolean m[][]) {
                            recordFragmatch(m);
                        }});
            } 
            catch(Ullman.UllmanException ex) {
                System.err.println(ex);
            }
        }
    }
          
    // recordFragmatch

    //   The Ullman algorithm has matched a fragment.  Record this match by
    //   setting a bit in atom->fragments.
    void recordFragmatch (boolean m[][]) {
        if (DEBUG) 
            System.out.println
                ("Molecule matches "+FRAG_NAMES[currentFragmentNo]);
        for (int i=0; i<currentFragmol.nAtoms; i++)
            for (int j=0; j<molecule.nAtoms; j++) {
                if (m[i][j]) {
                    molecule.atoms[j].addFragment
                        (FRAG_TYPES[currentFragmentNo]);
                }
            }
    }
   
    // fragmentToMolecule

    //  Converts a fragment data structure into a molecule data
    //  structure, so we can use the Ullman algorithm. */
    Molecule fragmentToMolecule (FragAtom fragment[]) throws MoleculeException {

        Molecule mol = new Molecule();
        mol.nAtoms = fragment.length;
        mol.atoms = new Atom[mol.nAtoms];
        
        int cnt = 0;
        for (int i=0; i<fragment.length; i++) {
            mol.atoms[i] = new Atom(mol, i, fragment[i].atomType);
            if (DEBUG) 
                System.out.println("Atom "+i+" type "+mol.atoms[i].type.name);
            
            cnt += fragment[i].neighbours.length;
        }
        
        int nBonds = cnt/2;
        if (DEBUG) 
            System.out.println("nBonds "+nBonds);
        
        mol.bonds = new Bond[nBonds];
        mol.nBonds = nBonds;
        cnt = 0;
        for (int i=0; i<fragment.length; i++) {
            for (int j=0; j<fragment[i].neighbours.length; j++) {
                int no2 = fragment[i].neighbours[j]-1;
                
                boolean match = false;
                for (int k=0; k<cnt; k++) {
                    Bond b = mol.bonds[k];
                    if ((b.atom1.no == i && b.atom2.no == no2) ||
                        (b.atom2.no == i && b.atom1.no == no2)) {
                        match = true;
                        break;
                    }
                }
                if (match) continue;

                // Fragment has no bond type information: use unknown
                mol.bonds[cnt] = new Bond(cnt, mol.atoms[i], 
                                          mol.atoms[no2], BondType.Type.UNK);
                if (DEBUG) 
                    System.out.println
                        ("Bond "+cnt+
                         " atom1 "+mol.atoms[i].no+
                         " atom2 "+mol.atoms[no2].no);
                cnt++;
            }
        }

        if (cnt != nBonds) 
            System.err.println("Fragment bond count mismatch!");

        mol.build();
        return mol;
    }
    
}




